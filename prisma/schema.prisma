// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MODELS

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash  String

  firstName String?
  lastName  String?

  auftraege Auftrag[]

  bookmarks    Bookmark[]
  //erstellte Adressen vom Nutzer
  customer     Customer[]
  auftraggeber Auftraggeber[]

  @@map("users")
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  link        String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("bookmarks")
}

model Customer {
  id          Int     @id @default(autoincrement())
  firstName   String?
  lastName    String?
  email       String?
  phoneNumber String?
  street      String?
  zipCode     String?
  place       String?
  country     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  @@map("Customer")
}

// ENUMERATIONS

enum Auftragsstatus {
  Eingegangen
  Kundenkontakt_nicht_moeglich
  Kundenkontakt_verschoben
  Geplant
  Ausfuehrung_vor_Ort_erfolgt
  Ausfuehrung_vor_Ort_nicht_moeglich
  Abgeschlossen_Vertragspartner
  Abgelehnt
  Storniert
}

model Auftrag {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  emailEingang  DateTime?
  terminiertZum DateTime?
  uhrzeit       DateTime?
  datumAushang  DateTime?

  done                 Boolean?
  bemerkung            String?
  vorgemerkt           String?
  liNr                 String?
  adresseLi            String?
  plzLi                String?
  ortLi                String?
  vwBuro               String?
  vwMa                 String?
  mailadresseVw        String?
  telVw                String?
  hmName               String?
  hmTel                String?
  emailBetreff         String?
  emailAnhang          String?
  bestatigungVersendet Boolean?
  anfrageThema         String?
  anfrageBestatigt     Boolean?
  angebotErstellt      Boolean?
  angebotsnummer       String?
  angebot              String?
  auftragbestatigung   Boolean?
  vwBestatigung        String?

  aushang        Boolean?
  agInformiert   Boolean?
  bgb            Boolean?
  bgbBericht     Boolean?
  ssa            Boolean?
  bericht        Boolean?
  umb            Boolean?
  ber            Boolean?
  reNr           String?
  reBetrag       Decimal?
  reErhalten     Boolean?
  reNr2          String?
  reBetrag2      Decimal?
  reNr2Erhalten  Boolean?
  dateien        String?
  mahnung        Boolean?
  mahnung1       Boolean?
  mahnungErhaten Boolean?
  auftraggeber   String?
  ap             String?
  strasse        String?
  plz            String?
  ort            String?
  tel            String?
  email          String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("auftraege")
}

model Auftraggeber {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  auftraggebername String
  ap               String
  strasse          String
  plz              Int
  ort              String
  tel              String
  email            String   @unique
  userId           Int
  user             User     @relation(fields: [userId], references: [id])

  @@map("auftraggeber")
}

// ORDER API 
model Order {
  id                    Int                     @id @default(autoincrement())
  number                String
  remarkExternal        String?
  createdAt             DateTime                @default(now())
  status                OrderStatus[]
  customerContacts      CustomerContact[]
  NotPossible           NotPossible[]
  Postponed             Postponed[]
  Cancelled             Cancelled[]
  Rejected              Rejected[]
  ClosedContractPartner ClosedContractPartner[]
  Planned               Planned[]
  Received              Received[]
}

model OrderStatus {
  id                  Int      @id @default(autoincrement())

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  type                String? // represents the orderstatusType
  setOn               DateTime? // represents the setOn field
  executionOnSiteDone Boolean? // represents the executionOnSiteDone field
  orderId             Int // represents the relation to Order
  order               Order    @relation(fields: [orderId], references: [id])
}

// model CustomerContacts {
//   id                     Int    @id @default(autoincrement())
//   customerContact        CustomerContact[]
// }

model CustomerContact {
  id                    Int                     @id @default(autoincrement())
  contactAttemptOn      DateTime
  contactPersonCustomer String?
  agentCP               String
  result                String
  remark                String?
  orderId               Int
  order                 Order                   @relation(fields: [orderId], references: [id])
  ClosedContractPartner ClosedContractPartner[]
  planned               Planned?                @relation(fields: [plannedId], references: [id])
  plannedId             Int?
  received              Received?               @relation(fields: [receivedId], references: [id])
  receivedId            Int?
}

model ReportOrderStatusRequest {
  id                      Int                   @id @default(autoincrement())
  environment             String
  language                String
  consumer                String
  closedContractPartner   ClosedContractPartner @relation(fields: [closedContractPartnerId], references: [id])
  closedContractPartnerId Int
}

model ClosedContractPartner {
  id                              Int                        @id @default(autoincrement())
  order                           Order?                      @relation(fields: [orderId], references: [id])
  orderId                         Int?
  orderstatusType                 Int?
  setOn                           DateTime?
  CustomerContact                 CustomerContact[]
  deficiencyDescription           String?
  registrationHealthAuthoritiesOn DateTime?
  extraordinaryExpenditureReason  String?
  suppliedDocuments               SuppliedDocuments[]
  recordedSystem                  RecordedSystem[]
  ReportOrderStatusRequest        ReportOrderStatusRequest[]
  Contact                         Contact[]

}

model SuppliedDocuments {
  id                      Int                    @id @default(autoincrement())
  document                Document?              @relation(fields: [documentId], references: [id])
  ClosedContractPartner   ClosedContractPartner? @relation(fields: [closedContractPartnerId], references: [id])
  closedContractPartnerId Int?
  documentId              Int?
}

model Document {
  id                Int                 @id @default(autoincrement())
  type              String
  content           String
  SuppliedDocuments SuppliedDocuments[]
}

model RecordedSystem {
  id                      Int                    @id @default(autoincrement())
  drinkingWaterFacility   DrinkingWaterFacility  @relation(fields: [drinkingWaterFacilityId], references: [id])
  property                Property?              @relation(fields: [propertyId], references: [id])
  propertyId              Int?
  services                Service[]
  ClosedContractPartner   ClosedContractPartner? @relation(fields: [closedContractPartnerId], references: [id])
  closedContractPartnerId Int?
  drinkingWaterFacilityId Int
}

model Property {
  id                           Int              @id @default(autoincrement())
  hotwatersupplyType_central   Boolean
  hotwatersupplyType_decentral Boolean
  RecordedSystem               RecordedSystem[]
}

model Service {
  id                       Int             @id @default(autoincrement())
  articleNumber_ista       Int
  quantity                 Int
  unit                     String
  extraordinaryExpenditure Boolean
  purchasePrice_ista       Float?
  warranty                 Boolean?
  serviceRenderedIn        Address         @relation(fields: [addressId], references: [id])
  addressId                Int
  RecordedSystem           RecordedSystem? @relation(fields: [recordedSystemId], references: [id])
  recordedSystemId         Int?
}

model DrinkingWaterFacility {
  id                                          Int                   @id @default(autoincrement())
  consecutiveNumber                           Int
  usageType                                   String?
  usageTypeOthers                             String?
  numberSuppliedUnits                         Int?
  numberDrinkingWaterHeater                   Int?
  totalVolumeLitres                           Int?
  pipingSystemType_Circulation                Boolean?
  pipingSystemType_Waterbranchline            Boolean?
  pipingSystemType_Pipetraceheater            Boolean?
  pipingVolumeGr3Litres                       Boolean?
  deadPipeKnown                               Boolean?
  deadPipesPosition                           String?
  numberAscendingPipes                        Int?
  aerosolformation                            Boolean?
  explanation                                 String?
  numberSuppliedPersons                       Int?
  pipeworkSchematicsAvailable                 Boolean?
  numberColdWaterLegs                         Int?
  numberHotWaterLegs                          Int?
  temperatureCirculationDWH_A                 Int?
  temperatureCirculationDWH_B                 Int?
  heatExchangerSystem_central                 Boolean?
  heatExchangerSystem_districtheating         Boolean?
  heatExchangerSystem_continuousflowprinciple Boolean?
  drinkingWaterHeaters                        DrinkingWaterHeater[]
  ascendingPipes                              AscendingPipe[]
  samplingPoints                              SamplingPoint[]
  RecordedSystem                              RecordedSystem[]
}

model DrinkingWaterHeater {
  id                              Int                   @id @default(autoincrement())
  consecutiveNumber               Int
  inletTemperatureDisplayPresent  Boolean?
  inletTemperature                Int?
  outletTemperatureDisplayPresent Boolean?
  outletTemperature               Int?
  pipeDiameterOutlet              String?
  pipeMaterialtypeOutlet          String?
  volumeLitre                     Int?
  roomType                        String?
  roomPosition                    Int?
  positionDetail                  String?
  unit                            Unit                  @relation(fields: [unitId], references: [id])
  unitId                          Int
  DrinkingWaterFacility           DrinkingWaterFacility @relation(fields: [drinkingWaterFacilityId], references: [id])
  drinkingWaterFacilityId         Int
}

model AscendingPipe {
  id                                     Int                   @id @default(autoincrement())
  consecutiveNumber                      Int
  ascendingPipeTemperatureDisplayPresent Boolean
  flowTemperature                        Int?
  circulationTemperatureDisplayPresent   Boolean
  circulationTemperature                 Int?
  pipeDiameter                           String
  pipeMaterialtype                       String
  DrinkingWaterFacility                  DrinkingWaterFacility @relation(fields: [drinkingWaterFacilityId], references: [id])
  drinkingWaterFacilityId                Int
}

model SamplingPoints {
  id            Int             @id @default(autoincrement())
  samplingPoint SamplingPoint[]
}

model SamplingPoint {
  id                               Int                   @id @default(autoincrement())
  consecutiveNumber                Int
  installationNumber               Int?
  numberObjectInstallationLocation Int?
  pipingSystemType                 String?
  remoteSamplingPoint              Boolean?
  roomType                         String?
  roomPosition                     Int?
  positionDetail                   String
  unit                             Unit                  @relation(fields: [unitId], references: [id])
  unitId                           Int
  DrinkingWaterFacility            DrinkingWaterFacility @relation(fields: [drinkingWaterFacilityId], references: [id])
  drinkingWaterFacilityId          Int
  SamplingPoints                   SamplingPoints?       @relation(fields: [samplingPointsId], references: [id])
  samplingPointsId                 Int?
}

model Unit {
  id                  Int                   @id @default(autoincrement())
  floor               Int
  storey              String
  position            Int?
  userName            String?
  generalUnit         Boolean
  building            Building              @relation(fields: [buildingId], references: [id])
  buildingId          Int
  DrinkingWaterHeater DrinkingWaterHeater[]
  SamplingPoint       SamplingPoint[]
}

model Building {
  id        Int     @id @default(autoincrement())
  address   Address @relation(fields: [addressId], references: [id])
  addressId Int
  Unit      Unit[]
}

model Address {
  id           Int        @id @default(autoincrement())
  street       String
  streetnumber String?
  postcode     String
  city         String
  country      String?
  building     Building[]
  Service      Service[]
}

model Envelope {
  id       Int    @id @default(autoincrement())
  Header   Header @relation(fields: [headerId], references: [id])
  headerId Int    @unique
  Body     Body   @relation(fields: [bodyId], references: [id])
  bodyId   Int    @unique
}

model Header {
  id       Int       @id @default(autoincrement())
  Envelope Envelope? // one-to-one relation with Envelope
}

model Body {
  id        Int       @id @default(autoincrement())
  Envelope  Envelope? // one-to-one relation with Envelope
  Request   Request   @relation(fields: [requestId], references: [id])
  requestId Int       @unique
}

model Request {
  id            Int          @id @default(autoincrement())
  Body          Body? // one-to-one relation with Body
  environment   String
  language      String
  consumer      String
  Rejected      Rejected?
  rejectedId    Int?
  NotPossible   NotPossible?
  notPossibleId Int?
  Postponed     Postponed?
  postponedId   Int?
  Cancelled     Cancelled?
  cancelledId   Int?
  Planned       Planned?
  plannedId     Int?
  Received      Received?
}

model Postponed {
  id                   Int       @id @default(autoincrement())
  Request              Request   @relation(fields: [requestId], references: [id])
  requestId            Int       @unique
  Order                Order     @relation(fields: [orderId], references: [id])
  orderId              Int
  statusType           String
  setOn                DateTime
  Contact              Contact[]
  nextContactAttemptOn DateTime
  postponedReason      String
}

model Rejected {
  id         Int       @id @default(autoincrement())
  Request    Request   @relation(fields: [requestId], references: [id])
  requestId  Int       @unique
  Order      Order     @relation(fields: [orderId], references: [id])
  orderId    Int
  statusType Int
  setOn      DateTime
  Contact    Contact[]
  reason     String
  reasonText String?
}

model NotPossible {
  id         Int       @id @default(autoincrement())
  Request    Request?   @relation(fields: [requestId], references: [id])
  requestId  Int?       @unique
  Order      Order     @relation(fields: [orderId], references: [id])
  orderId    Int
  statusType String
  setOn      DateTime
  Contact    Contact[]
}

model Contact {
  id               Int         @id @default(autoincrement())
  contactAttemptOn DateTime
  contactPerson    String?
  agentCP          String
  result           String
  remark           String?
  NotPossible      NotPossible @relation(fields: [notPossibleId], references: [id])
  notPossibleId    Int
  Rejected         Rejected    @relation(fields: [rejectedId], references: [id])
  rejectedId       Int
  Postponed        Postponed   @relation(fields: [postponedId], references: [id])
  postponedId      Int
  Cancelled        Cancelled   @relation(fields: [cancelledId], references: [id])
  cancelledId      Int
  ClosedContractPartner ClosedContractPartner @relation(fields: [closedContractPartnerId], references: [id])
  closedContractPartnerId Int
}

model Cancelled {
  id                 Int       @id @default(autoincrement())
  Request            Request?   @relation(fields: [requestId], references: [id])
  requestId          Int?       @unique
  Order              Order     @relation(fields: [orderId], references: [id])
  orderId            Int
  statusType         String
  setOn              DateTime
  Contact            Contact[]
  cancellationReason String
}

model Planned {
  id                          Int               @id @default(autoincrement())
  Order                       Order             @relation(fields: [orderId], references: [id])
  orderId                     Int
  orderstatusType             String
  setOn                       DateTime
  CustomerContact             CustomerContact[]
  detailedScheduleDate        DateTime
  detailedScheduleTimeFrom    DateTime?
  detailedScheduleTimeTo      DateTime?
  detailedScheduleDelayReason String?
  Request                     Request           @relation(fields: [requestId], references: [id])
  requestId                   Int               @unique
}

model Received {
  id              Int               @id @default(autoincrement())
  Order           Order             @relation(fields: [orderId], references: [id])
  orderId         Int
  orderstatusType String
  setOn           DateTime
  CustomerContact CustomerContact[]
  Request         Request?           @relation(fields: [requestId], references: [id])
  requestId       Int?               @unique
}
